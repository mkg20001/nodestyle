plugins {
    id "com.github.hierynomus.license" version "0.13.1"
}

group 'net.nodestyle'
version '0.0.1'

apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.7
targetCompatibility = 1.7


repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    //compile
}

jar {
    manifest {
        attributes 'License': 'GPL-3.0'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'net.nodestyle'
            artifactId 'nodestyle'
            version '0.0.1'

            artifact sourceJar
        }
    }
}


license {
    header new File('./HEADER' )
    strictCheck false
    mapping {
        javascript='JAVADOC_STYLE'
    }
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Maciej KrÃ¼ger'
    ext.email = 'mkg20001@gmail.com'
}

assemble.dependsOn().remove(license)

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'NodeStyle - NodeJS like APIs for Java',
                'Implementation-Version': version
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


test {
    dependsOn 'cleanTest'

    // set a system property for the test JVM(s)
    //systemProperty 'some.prop', 'value'

    // explicitly include or exclude tests
    include 'net/nodestyle/test/**'
    //exclude 'org/boo/**'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}